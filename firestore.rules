rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to validate trip data
    function isValidTrip() {
      return (
        request.resource.data.title is string &&
        request.resource.data.title.size() > 0 &&
        request.resource.data.location is string &&
        request.resource.data.startDate is string &&
        request.resource.data.endDate is string &&
        request.resource.data.type is string &&
        request.resource.data.type in ['leisure', 'business', 'adventure', 'hiking', 'family']
      );
    }
    
    // Allow users to manage their own user document
    match /users/{userId} {
      // Allow users to read their own document
      allow read, write: if isAuthenticated() && isOwner(userId);
      
      // Allow users to create their document with favoriteTrips
      allow create: if isAuthenticated() && isOwner(userId) && 
        request.resource.data.favoriteTrips is list;
        
      // Allow users to update their own document
      allow update: if isAuthenticated() && isOwner(userId) && (
        (request.resource.data.favoriteTrips is list && 
         request.resource.data.favoriteTrips.hasOnly([request.auth.uid])) ||
        request.resource.data.updatedAt is timestamp
      ) &&
      // Ensure we're only updating the favoriteTrips array or updatedAt
      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['favoriteTrips', 'updatedAt']);
      
      // Allow users to manage their own trips
      match /trips/{tripId} {
        // Allow read if user is authenticated
        allow read: if isAuthenticated();
        // Allow create/update/delete only if user owns the document
        allow create, update, delete: if isAuthenticated() && isOwner(userId);
      }
    }
    
    // Allow reading trips collection
    match /trips/{tripId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
    }
    
    // Default deny all other operations
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
