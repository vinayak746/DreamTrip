rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to validate trip data
    function isValidTrip() {
      return (
        request.resource.data.title is string &&
        request.resource.data.title.size() > 0 &&
        request.resource.data.location is string &&
        request.resource.data.startDate is string &&
        request.resource.data.endDate is string &&
        request.resource.data.type is string &&
        request.resource.data.type in ['leisure', 'business', 'adventure', 'hiking', 'family'] &&
        request.resource.data.saved is number &&
        request.resource.data.isFavorite is bool
      );
    }
    
    // Allow users to read and write to their own user document
    match /users/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      
      // Trip sub-collection
      match /trips/{tripId} {
        allow read: if isAuthenticated() && isOwner(userId);
        allow create: if isAuthenticated() && isOwner(userId) && isValidTrip();
        allow update: if isAuthenticated() && isOwner(userId) && isValidTrip();
        allow delete: if isAuthenticated() && isOwner(userId);
      }
    }
    
    // Default deny all other operations
    match /{document=**} {
      allow read, write: if false;
    }
}
